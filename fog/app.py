import time

from flask import Flask, request
import json
import os
from datetime import datetime
from requests import post
from pandas import DataFrame
from joblib import load
from auto import filtering, update_db, storage_handler  #
from config.config import retrieve_config
from database.query import calculateAge, retrieve_joblib
import _thread as thread

from on_demand import retrieve_row_measure, retrieve_rows, insert_patient

app = Flask(__name__)

config = retrieve_config()


# route for iot
@app.route('/iot', methods=['POST'])
def measurements_handler():
    """
    HTTP handler for the IoTs sending measurements
    Returns: a string for success

    """
    print(request.is_json)
    content = request.get_json()
    filtered = filtering(content)
    if filtered is not None:
        # update to DB
        update_db(content)
    return 'Updated'


@app.route('/patientsX', methods=['POST'])
def get_patients_x():
    """
    The web interface uses this route to retrieve the list of patient of a certain area, if the current node DB doesn't
    have the list, it calls other fog node
    Returns: a json array containing the patients

    """
    js = request.get_json()
    area_belong_to = js['area_belong_to']
    area_to_connect = js['area_to_connect']
    patients = retrieve_rows(area_to_connect, area_belong_to)
    if patients == '[]':
        if area_to_connect == area_belong_to:
            return patients
        # connect other fog B e C
        elif area_belong_to == "Area A":
            dns1 = config['fog']['elb']['Area A']
        elif area_belong_to == "Area B":
            dns1 = config['fog']['elb']['Area B']
        else:
            dns1 = config['fog']['elb']['Area C']
        time.sleep(0.113)
        patients = post("http://" + dns1 + "/patients", json={"area_to_connect": area_belong_to,
                                                              "area_belong_to": area_belong_to})
        if not json.loads(patients.content):
            return patients.content
        return patients.content
    else:
        return patients


@app.route('/patients', methods=['POST'])
def get_patients():
    """
    HTTP route to retrieve patients list when the main node doesn't have it
    Returns: a json array containing the patients

    """
    js = request.get_json()
    area_belong_to = js['area_belong_to']
    area_to_connect = js['area_to_connect']
    return retrieve_rows(area_to_connect, area_belong_to)


@app.route('/measurementsX', methods=['POST'])
def get_measurements_x():
    """
    The web interface uses this route to retrieve the patient clinical info of a certain area, if the current node DB
    doesn't have the infos, it calls other fog node
    Returns: a json object containing the infos

    """
    js = request.get_json()
    area_belong_to = js['area_belong_to']
    area_to_connect = js['area_to_connect']
    _id = js['id']
    measurements = retrieve_row_measure(area_to_connect, area_belong_to, _id)
    if measurements == '[]':
        if area_to_connect == area_belong_to:
            measurements = dict(glucose='--', bloodPressure='--', insulin='--', bmi='--', skin='--', age='--',
                                outcome='--')
            return json.dumps(measurements)
        # connect other fog B e C
        elif area_belong_to == "Area A":
            dns1 = config['fog']['elb']['Area A']
        elif area_belong_to == "Area B":
            dns1 = config['fog']['elb']['Area B']
        else:
            dns1 = config['fog']['elb']['Area C']
        time.sleep(0.113)
        measurements = post("http://" + dns1 + "/measurements", json={"area_to_connect": area_belong_to,
                                                                      "area_belong_to": area_belong_to, "id": _id})
        if not json.loads(measurements.content):
            measurements = dict(glucose='--', bloodPressure='--', insulin='--', bmi='--', skin='--', age='--',
                                outcome='--')
            return json.dumps(measurements)
        return measurements.content
    else:
        return measurements


@app.route('/measurements', methods=['POST'])
def measurements():
    """
    HTTP route to retrieve patient infos when the main node doesn't have it
    Returns: a json object containing the infos

    """
    js = request.get_json()
    area_belong_to = js['area_belong_to']
    area_to_connect = js['area_to_connect']
    _id = js['id']
    return retrieve_row_measure(area_to_connect, area_belong_to, _id)


# connect other fog


@app.route('/evaluation', methods=['POST'])
def evaluate():
    """
    This route allows the web interface to retrieve the evaluation of a new patient using a classifier generated by
    the cloud
    Returns: 0 for healthy, 1 for diabetic or 'Prediction not available, try later.' if classifier is not present yet

    """
    js = request.get_json()
    age = calculateAge(datetime.strptime(str(js['bday']), '%Y-%m-%d'))
    area = js['area']
    del js['area']
    del js['bday']
    js['age'] = age
    # glucose, bloodPressure, insulin, bmi, skin, age
    js['glucose'] = [js['glucose']]
    js['bloodPressure'] = [js['bloodPressure']]
    js['insulin'] = [js['insulin']]
    js['bmi'] = [js['bmi']]
    js['skin'] = [js['skin']]
    js['age'] = [js['age']]
    print(js)
    df = DataFrame.from_dict(js)
    test_x = df.iloc[:, 0:6].values
    jl = retrieve_joblib(area)
    if jl is None:
        return json.dumps({"result": 2})
    with open('/fog/best_classifier.joblib', 'wb') as f:
        f.write(jl)
    clf = load('/fog/best_classifier.joblib')
    pred_y = clf.predict(test_x)
    return json.dumps({"result": int(pred_y[0])})


@app.route('/add_patientX', methods=['POST', 'GET'])
def add_patient_x():
    """
    This route allows to insert a new patient after a successful evaluation
    Returns: True if operation succeeded, False otherwise

    """
    js = request.get_json()
    area_to_connect = js['area_to_connect']
    area_belong_to = js['area']
    del js['area_to_connect']
    if area_to_connect == area_belong_to:
        result = insert_patient(area_belong_to, js)
        if not result:
            return json.dumps(False)
    else:
        dns = config['fog']['elb'][area_belong_to]
        time.sleep(0.113)
        result = post("http://" + dns + "/add_patient", json=js)
        if not json.loads(result.content):
            return json.dumps(False)
    return json.dumps(True)


@app.route('/add_patient', methods=['POST', 'GET'])
def add_patient():
    """
    This route allows to insert a new patient after a successful evaluation when the patient area
    isn't the one of the main node
    Returns: True if operation succeeded, False otherwise

    """
    js = request.get_json()
    area_belong_to = js['area']
    result = insert_patient(area_belong_to, js)
    if not result:
        return json.dumps(False)
    return json.dumps(True)


# route elb
@app.route('/ping', methods=['POST', 'GET'])
def ping():
    """
    A simple route to ping the node, used by ELB
    Returns: a string for success

    """
    return "Pong\n"


if __name__ == '__main__':
    try:
        thread.start_new_thread(storage_handler, ())
    except:
        print("Error: unable to start thread")
    app.run(host='0.0.0.0', port=8001)


